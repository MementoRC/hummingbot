name: ci

on:
  push:
    branches: [master, development, development_unofficial, 'refactor/unit_tests**', 'epic/**']
  pull_request:
    branches: [master, development, development_unofficial, 'refactor/unit_tests**', 'epic/**']
    types: [ready_for_review, opened, synchronize, reopened]

jobs:
  run_client:
    name: Check if client files changed
    outputs:
      is_set: ${{ steps.check_files.outputs.is_set }}
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - uses: technote-space/get-diff-action@v6
        with:
          PATTERNS: |
            **/*.+(py|pyx|pyd|yml)
      - name: Check if client files are modified
        id: check_files
        if: env.GIT_DIFF
        run: |
          echo ${{ env.GIT_DIFF }}
          echo "is_set=true" >> $GITHUB_OUTPUT

  build_hummingbot:
    name: build/test WSL:${{ matrix.os }}
    runs-on: windows-latest
    strategy:
      matrix:
        os: [Ubuntu-22.04]
        #os: [Debian, Alpine, kali-linux, openSUSE-Leap-15.2, Ubuntu-22.04]
    needs: run_client
    if: github.event.pull_request.draft == false && needs.run_client.outputs.is_set == 'true'

    defaults:
      run:
        shell: wsl-bash {0}

    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0
      - uses: Vampire/setup-wsl@v2
        with:
            distribution: ${{ matrix.os }}

      # Use cache's hashFiles function to check for changes in core code
      - name: Check for code changes
        id: program-changes
        uses: actions/cache@v3
        env:
          # Increase this value to manually reset cache if program files have not changed
          CACHE_NUMBER: 0
        with:
          path: README.md # placeholder file
          key: WSL-${{ matrix.os }}-build-${{ env.CACHE_NUMBER }}-${{ hashFiles('hummingbot/*', '**/*.py', '**/*.py*', '**/*.pxd', 'test/*') }}

      # Check for setup/environment-linux.yml changes
      - name: Cache conda dependencies
        id: conda-dependencies
        uses: actions/cache@v3
        env:
          # Increase this value to manually reset cache if setup/environment-linux.yml has not changed
          CONDA_CACHE_NUMBER: 0
        with:
          path: /usr/share/miniconda/envs/hummingbot
          key: WSL-${{ matrix.os }}-conda-${{ env.CONDA_CACHE_NUMBER }}-${{ hashFiles('setup/environment-linux.yml') }}

      # Set miniconda install directory
      - name: Set Environment Variables
        uses: tw3lveparsecs/github-actions-setvars@latest
        with:
          varFilePath: ./.github/variables/conda.env

      # Install Conda
      - name: Install conda
        run: |
          apt-get update
          apt-get install -y wget
          wget https://repo.anaconda.com/miniconda/Miniconda3-latest-Linux-x86_64.sh -O miniconda.sh
          echo "$MINICONDA"
          sh miniconda.sh -b -p $MINICONDA_PATH
          source $MINICONDA_PATH/etc/profile.d/conda.sh
          conda init
          conda config --set always_yes yes --set changeps1 no
          conda update -q conda
          conda info -a

      # Install environment and Hummingbot
      - name: Install environment and Hummingbot
        uses: ./.github/actions/install_env_and_hb
        with:
          program-cache-hit: ${{steps.program-changes.outputs.cache-hit}}
          dependencies-cache-hit: ${{steps.conda-dependencies.outputs.cache-hit}}
          shell: wsl-bash {0}

      # Compile and run tests if code has changed
      - name: Run pre-commit hooks on diff
        if: steps.program-changes.outputs.cache-hit != 'true' || steps.conda-dependencies.outputs.cache-hit != 'true'
        run: |
          source $MINICONDA_PATH/etc/profile.d/conda.sh
          conda activate hummingbot
          pre-commit run --files $(git diff --name-only origin/$GITHUB_BASE_REF)

      - name: Run stable tests and calculate coverage
        if: steps.program-changes.outputs.cache-hit != 'true' || steps.conda-dependencies.outputs.cache-hit != 'true'
        run: |
          source $MINICONDA_PATH/etc/profile.d/conda.sh
          conda activate hummingbot
          make test

      - name: Check and report global coverage
        if: steps.program-changes.outputs.cache-hit != 'true' || steps.conda-dependencies.outputs.cache-hit != 'true'
        run: |
          source $MINICONDA_PATH/etc/profile.d/conda.sh
          conda activate hummingbot
          make report_coverage

      - name: Validate coverage for the changes
        if: github.event_name == 'pull_request' && (steps.program-changes.outputs.cache-hit != 'true' || steps.conda-dependencies.outputs.cache-hit != 'true')
        run: |
          source $MINICONDA_PATH/etc/profile.d/conda.sh
          conda activate hummingbot
          git fetch --all -q
          git checkout -b $GITHUB_SHA
          coverage xml
          diff-cover --compare-branch=origin/$GITHUB_BASE_REF --fail-under=80 coverage.xml

      # Notify results to discord
      - uses: ruby/setup-ruby@v1
        with:
          ruby-version: '3.0'
      - name: Send Webhook Notification
        if: github.event_name != 'pull_request'
        env:
          JOB_STATUS: ${{ job.status }}
          WEBHOOK_URL: ${{ secrets.WEBHOOK_URL }}
          HOOK_OS_NAME: ${{ runner.os }}
          WORKFLOW_NAME: ${{ github.workflow }}
        run: |
          git clone --depth 1 https://github.com/DiscordHooks/github-actions-discord-webhook.git webhook
          bash webhook/send.sh $JOB_STATUS $WEBHOOK_URL
        shell: bash
