name: ci

on:
  workflow_call:
    inputs:
      should_run:
        required: false
        type: boolean
        default: false
      os-matrix:
        required: false
        type: string
        default: "['zero2_64_raspios', 'zero2_64_dietpi']"

jobs:
  build_hummingbot:
    name: build/tests RasPi ${{ matrix.cpu }}
    if: ${{ inputs.should_run == true }}
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        target: ${{ fromJson(inputs.os-matrix) }}
        #target: [zero_raspbian, zero_raspios, zero_dietpi, zero2_raspios, zero2_dietpi, zero2_64_raspios]
        include:
        - target: zero2_64_raspios
          cpu: cortex-a53
          cpu_info: cpuinfo/raspberrypi_zero2_w_arm64
          base_image: raspios_lite_arm64:latest
        - target: zero2_dietpi
          cpu: cortex-a7
          cpu_info: cpuinfo/raspberrypi_zero2_w
          base_image: dietpi:rpi_armv7_bullseye
        #- target: zero_raspbian
        #  cpu: arm1176
        #  cpu_info: cpuinfo/raspberrypi_zero_w
        #  base_image: raspbian_lite:latest
        #- target: zero_raspios
        #  cpu: arm1176
        #  cpu_info: cpuinfo/raspberrypi_zero_w
        #  base_image: raspios_lite:latest
        #- target: zero_dietpi
        #  cpu: arm1176
        #  cpu_info: cpuinfo/raspberrypi_zero_w
        #  base_image: dietpi:rpi_armv6_bullseye
        #- target: zero2_raspios
        #  cpu: cortex-a7
        #  cpu_info: cpuinfo/raspberrypi_zero2_w
        #  base_image: raspios_lite:latest
        #- target: zero2_dietpi
        #  cpu: cortex-a7
        #  cpu_info: cpuinfo/raspberrypi_zero2_w
        #  base_image: dietpi:rpi_armv7_bullseye
        #- target: zero2_64_dietpi
        #  cpu: cortex-a53
        #  cpu_info: cpuinfo/raspberrypi_zero2_w_arm64
        #  base_image: dietpi:rpi_armv8_bullseye

    defaults:
      run:
        shell: bash -l {0}

    steps:
      # Checkout Hummingbot - not much can be done without that!
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0

      # Use cache's hashFiles function to check for changes in core code
      - name: Check for code changes
        id: program-changes
        uses: actions/cache@v3
        env:
          # Increase this value to manually reset cache if program files have not changed
          CACHE_NUMBER: 0
        with:
          path: README.md # placeholder file
          key: ARM-${{ runner.os }}-build-${{ env.CACHE_NUMBER }}-${{ hashFiles('hummingbot/*', '**/*.py', '**/*.py*', '**/*.pxd', 'test/*') }}

#      # Install environment and Hummingbot
#      # Given that this uses an emulation, everything is done in the same step
#      - name: Install environment and Hummingbot
#        uses: ./.github/actions/install_env_and_hb_arm
#        with:
#          program-cache-hit: ${{steps.program-changes.outputs.cache-hit}}
#          dependencies-cache-hit: ${{steps.conda-dependencies.outputs.cache-hit}}
#          shell: bash -l {0}
#
#      # Notify results to discord
#      - uses: ruby/setup-ruby@v1
#        with:
#          ruby-version: '3.0'
#      - name: Send Webhook Notification
#        if: github.event_name != 'pull_request'
#        env:
#          JOB_STATUS: ${{ job.status }}
#          WEBHOOK_URL: ${{ secrets.WEBHOOK_URL }}
#          HOOK_OS_NAME: ${{ runner.os }}
#          WORKFLOW_NAME: ${{ github.workflow }}
#        run: |
#          git clone --depth 1 https://github.com/DiscordHooks/github-actions-discord-webhook.git webhook
#          bash webhook/send.sh $JOB_STATUS $WEBHOOK_URL
#        shell: bash
