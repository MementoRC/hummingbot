name: ci

on:
  workflow_call:
    inputs:
      should_run:
        required: false
        type: boolean
        default: false
      os-matrix:
        required: false
        type: string
        default: "['Debian', 'Ubuntu-22.04']"

jobs:
  build_hummingbot:
    name: build/tests ${{ matrix.os }}
    if: ${{ inputs.should_run == true }}
    runs-on: windows-latest
    strategy:
      fail-fast: false
      matrix:
        os: ${{ fromJson(inputs.os-matrix) }}
        #os: [Debian, Alpine, kali-linux, openSUSE-Leap-15.2, Ubuntu-22.04]

    defaults:
      run:
        shell: wsl-bash {0}

    steps:
      # Checkout Hummingbot - not much can be done without that!
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0

      # Checkout Hummingbot, set HB env variables and check cache
      - name: Set Project Env. vars and check cache
        id: checkout-hb-cache-hit
        uses: ./.github/actions/set_hb_env_cache
        with:
          runner: WSL-${{ runner.os }}
          conda-env-hash: ${{ hashFiles(inputs.env-yml-file) }}

      # Set up WSL
      - uses: Vampire/setup-wsl@v2
        with:
            distribution: ${{ matrix.os }}

      # Install Custom Conda to work under WSL
      - name: Install conda
        run: |
          apt-get update
          apt-get install -y wget
          wget https://repo.anaconda.com/miniconda/Miniconda3-latest-Linux-x86_64.sh -O miniconda.sh
          sh miniconda.sh -b -p ${{ github.env.MINICONDA_PATH }}
          source ${{ github.env.MINICONDA_PATH }}/etc/profile.d/conda.sh
          conda init
          conda config --set always_yes yes --set changeps1 no
          conda update -q conda

      # Verify conda environment
      - name: Verify conda environment
        run: |
          conda info --json |jq ".user_agent"
#
#      # Install environment and Hummingbot
#      - name: Install environment and Hummingbot
#        uses: ./.github/actions/install_env_and_hb
#        with:
#          program-cache-hit: ${{steps.program-changes.outputs.cache-hit}}
#          dependencies-cache-hit: ${{steps.conda-dependencies.outputs.cache-hit}}
#          shell: ${{ defaults.run.shell }}
#
#      # Compile and run tests if code has changed
#      - name: Run pre-commit hooks on diff
#        if: steps.program-changes.outputs.cache-hit != 'true' || steps.conda-dependencies.outputs.cache-hit != 'true'
#        run: |
#          source $MINICONDA_PATH/etc/profile.d/conda.sh
#          conda activate hummingbot
#          pre-commit run --files $(git diff --name-only origin/$GITHUB_BASE_REF)
#
#      - name: Run stable tests and calculate coverage
#        if: steps.program-changes.outputs.cache-hit != 'true' || steps.conda-dependencies.outputs.cache-hit != 'true'
#        run: |
#          source $MINICONDA_PATH/etc/profile.d/conda.sh
#          conda activate hummingbot
#          make test
#
#      - name: Check and report global coverage
#        if: steps.program-changes.outputs.cache-hit != 'true' || steps.conda-dependencies.outputs.cache-hit != 'true'
#        run: |
#          source $MINICONDA_PATH/etc/profile.d/conda.sh
#          conda activate hummingbot
#          make report_coverage
#
#      - name: Validate coverage for the changes
#        if: github.event_name == 'pull_request' && (steps.program-changes.outputs.cache-hit != 'true' || steps.conda-dependencies.outputs.cache-hit != 'true')
#        run: |
#          source $MINICONDA_PATH/etc/profile.d/conda.sh
#          conda activate hummingbot
#          git fetch --all -q
#          git checkout -b $GITHUB_SHA
#          coverage xml
#          diff-cover --compare-branch=origin/$GITHUB_BASE_REF --fail-under=80 coverage.xml
#
#      # Notify results to discord
#      - uses: ruby/setup-ruby@v1
#        with:
#          ruby-version: '3.0'
#      - name: Send Webhook Notification
#        if: github.event_name != 'pull_request'
#        env:
#          JOB_STATUS: ${{ job.status }}
#          WEBHOOK_URL: ${{ secrets.WEBHOOK_URL }}
#          HOOK_OS_NAME: ${{ runner.os }}
#          WORKFLOW_NAME: ${{ github.workflow }}
#        run: |
#          git clone --depth 1 https://github.com/DiscordHooks/github-actions-discord-webhook.git webhook
#          bash webhook/send.sh $JOB_STATUS $WEBHOOK_URL
#        shell: bash
