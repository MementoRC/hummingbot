name: ci

on:
  workflow_call:
    inputs:
      should_run:
        required: false
        type: boolean
        default: false
      env-yml-file:
        required: false
        type: string
        default: setup/environment-linux.yml
      os-matrix:
        required: false
        type: string
        default: "['ubuntu-latest', 'ubuntu-20.04']"
      shell:
        required: false
        type: string
        default: "bash -l {0}"

jobs:
  build_hummingbot:
    name: build/tests ${{ matrix.os }}
    if: ${{ inputs.should_run == true }}
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: ${{ fromJson(inputs.os-matrix) }}

    defaults:
      run:
        shell: ${{ inputs.shell }}

    steps:
      # Checkout Hummingbot - not much can be done without that!
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0

      # Checkout Hummingbot, set HB env variables and check cache
      - name: Set Project Env. vars and check cache
        id: checkout-hb-cache-hit
        uses: ./.github/actions/set_hb_env_cache
        with:
          runner: ${{ runner.os }}
          conda-env-hash: ${{ hashFiles(inputs.env-yml-file) }}

      # Double-check Conda environment
      - uses: conda-incubator/setup-miniconda@v2
        with:
          miniconda-version: "latest"
          python-version: ${{ github.env.HB_PYTHON_VERSION }}
          auto-update-conda: true
          auto-activate-base: true
          use-only-tar-bz2: true

      # Verify conda environment
      - name: Verify conda environment
        run: |
          conda --version

#      # Install environment and Hummingbot
#      - name: Install environment and Hummingbot
#        uses: ./.github/actions/install_env_and_hb
#        with:
#          program-cache-hit: ${{steps.checkout-hb-cache-hit.outputs.hb-cache-hit}}
#          dependencies-cache-hit: ${{steps.checkout-hb-cache-hit.outputs.conda-cache-hit}}
#          shell: ${{ inputs.shell }}
#
#      # Compile and run tests if code has changed
#      - name: Run pre-commit hooks on diff
#        if: steps.checkout-hb-cache-hit.outputs.hb-cache-hit != 'true' || steps.checkout-hb-cache-hit.outputs.conda-cache-hit != 'true'
#        run: |
#          conda activate hummingbot
#          pre-commit run --files $(git diff --name-only origin/$GITHUB_BASE_REF)
#
#      - name: Run stable tests and calculate coverage
#        if: steps.checkout-hb-cache-hit.outputs.hb-cache-hit != 'true' || steps.checkout-hb-cache-hit.outputs.conda-cache-hit != 'true'
#        run: |
#          conda activate hummingbot
#          coverage run -m pytest \
#            --ignore="test/connector" \
#            --ignore="test/debug" \
#            --ignore="test/mock" \
#            --ignore="test/hummingbot/connector/gateway/amm" \
#            --ignore="test/hummingbot/connector/gateway/clob"
#
#      - name: Check and report global coverage
#        if: steps.checkout-hb-cache-hit.outputs.hb-cache-hit != 'true' || steps.checkout-hb-cache-hit.outputs.conda-cache-hit != 'true'
#        run: |
#          conda activate hummingbot
#          make report_coverage
##
#      - name: Validate coverage for the changes
#        if: github.event_name == 'pull_request' && (steps.checkout-hb-cache-hit.outputs.hb-cache-hit != 'true' || steps.checkout-hb-cache-hit.outputs.conda-cache-hit != 'true')
#        run: |
#          conda activate hummingbot
#          git fetch --all -q
#          git checkout -b $GITHUB_SHA
#          coverage xml
#          diff-cover --compare-branch=origin/$GITHUB_BASE_REF --fail-under=80 coverage.xml

      # Notify results to discord
      - name: Discord Webhook Action
        uses: tsickert/discord-webhook@v5.2.0
        with:
          webhook-url: ${{ secrets.WEBHOOK_URL }}
          username: 'Hummingbot CI'
          avatar-url: 'https://avatars.githubusercontent.com/u/77006982?s=200&v=4'
          embed-title: "Build ${{ github.run_number }} for ${{ github.repository }} on ${{ matrix.os }} has finished.",
          embed-description: "Build ${{ github.run_number }} for ${{ github.repository }} on ${{ matrix.os }} has finished.",
          embed-color: 16711680,
          embed-fields: '[
                    {
                      "name": "Build Status",
                      "value": "${{ job.status }}",
                      "inline": true
                    },
                    {
                      "name": "Build URL",
                      "value": "${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}",
                      "inline": true
                    }
                  ]'
      # Notify results to discord
      - uses: ruby/setup-ruby@v1
        with:
          ruby-version: '3.0'
      - name: Send Webhook Notification
        if: github.event_name != 'pull_request'
        env:
          JOB_STATUS: ${{ job.status }}
          WEBHOOK_URL: ${{ secrets.WEBHOOK_URL }}
          HOOK_OS_NAME: ${{ runner.os }}
          WORKFLOW_NAME: ${{ github.workflow }}
        run: |
          git clone --depth 1 https://github.com/DiscordHooks/github-actions-discord-webhook.git webhook
          bash webhook/send.sh $JOB_STATUS $WEBHOOK_URL
        shell: bash
